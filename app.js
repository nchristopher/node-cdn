// Generated by CoffeeScript 1.6.2
/* jslint nomen: true, plusplus: true, vars: true, indent: 2, node: true
*/


(function() {
  "use strict";
  var $, CreateFakeApp, ECT, Faker, S3Config, S3CreateNewAppsJSONFile, S3GetAppJSONStoreRedis, S3GetListOfApps, S3ReadSingleAppJSON, S3UpdateAppsJSON, S3client, S3upload, app, app_url, appdir, apps, apps_file_url, apps_filename, async, cleanbodyjson, ectRenderer, exampleapp, express, fs, get_app_list, get_email, get_personalised_ribbon, knox, port, redis, redis_client, uniqueId,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  express = require('express');

  $ = require('jquery');

  ECT = require('ect');

  fs = require('fs');

  Faker = require('Faker');

  async = require('async');

  require('js-yaml');

  S3Config = require('./config/S3.yml');

  knox = require('knox');

  S3client = knox.createClient(S3Config);

  appdir = '/apps/';

  apps_filename = 'apps.json';

  apps_file_url = 'https://' + S3Config['bucket'] + '.s3.amazonaws.com' + appdir + apps_filename;

  console.log("apps.json is: " + apps_file_url);

  port = process.env.PORT || 5000;

  /* MUST Move these Methods to Lib in Next sprint
  */


  uniqueId = function(length) {
    var id;

    if (length == null) {
      length = 18;
    }
    id = '_TEST';
    while (id.length < length) {
      id += Math.random().toString(36).substr(2);
    }
    return id.substr(0, length);
  };

  CreateFakeApp = function() {
    var exampleapp, _ref;

    exampleapp = require('./public/app-example.json');
    exampleapp['Active__c'] = false;
    exampleapp['Id'] = uniqueId(18);
    exampleapp['Mandatory__c'] = (_ref = Math.random() < 0.5) != null ? _ref : {
      "true": false
    };
    exampleapp['Name'] = Faker.random.bs_buzz();
    exampleapp['Description__c'] = Faker.Lorem.sentence();
    return exampleapp;
  };

  S3upload = function(filename, jsonstr) {
    var req;

    req = S3client.put(appdir + filename, {
      'Content-Length': jsonstr.length,
      'Content-Type': 'application/json',
      'x-amz-acl': 'public-read'
    });
    req.on('response', function(res) {
      if (200 === res.statusCode) {
        return console.log('saved to %s', req.url);
      }
    });
    return req.end(jsonstr);
  };

  S3UpdateAppsJSON = function(newapp) {
    var existing_apps;

    existing_apps = [];
    return $.getJSON(apps_file_url, function(apps) {
      var app, appsnew, _i, _len, _ref;

      console.log("There are " + apps.length + " Apps");
      if (apps.length > 0) {
        for (_i = 0, _len = apps.length; _i < _len; _i++) {
          app = apps[_i];
          existing_apps.push(app['Id']);
          if (app['Id'] === newapp['Id']) {
            app = newapp;
          }
        }
      } else {
        S3CreateNewAppsJSONFile(newapp);
      }
      if (_ref = newapp['Id'], __indexOf.call(existing_apps, _ref) >= 0) {
        return S3upload(apps_filename, JSON.stringify(apps));
      } else {
        console.log("*NEW* App: " + newapp['Id']);
        apps.push(newapp);
        console.log("Number of apps with *New* App: " + apps.length);
        appsnew = apps;
        return S3upload(apps_filename, JSON.stringify(appsnew));
      }
    }).error(function() {
      console.log('error fetching apps.json ... CREATE it!');
      return S3CreateNewAppsJSONFile(newapp);
    });
  };

  S3CreateNewAppsJSONFile = function(newapp) {
    var apps;

    apps = [];
    apps.push(newapp);
    return S3upload(apps_filename, JSON.stringify(apps));
  };

  exampleapp = require('./public/app-example.json');

  apps = S3UpdateAppsJSON(exampleapp);

  /* The Mini Express App
  */


  app = module.exports = express();

  app.configure(function() {
    app.use(express.bodyParser());
    app.use(express["static"](__dirname + '/public'));
    app.use(express["static"](__dirname + '/spec'));
    app.use(express["static"](__dirname + '/lib'));
    app.use(express["static"](__dirname + '/apps'));
    return app.use(express.cookieParser());
  });

  ectRenderer = ECT({
    watch: true,
    root: __dirname + '/views'
  });

  app.engine('.html', ectRenderer.render);

  app.get('/', function(req, res) {
    return res.render('ribbon.html', {
      title: 'App Ribbon Test'
    });
  });

  app.get('/upload', function(req, res) {
    return res.render('uploadform.html', {
      title: 'Basic Uploader Form'
    });
  });

  cleanbodyjson = function(dirty) {
    var len, pos1, pos2, pos3, pos4, pos5;

    console.log("     TYPE : " + (typeof dirty));
    if (typeof dirty === 'object') {
      dirty = JSON.stringify(dirty);
      dirty = dirty.replace(/\\"/g, '"');
    }
    len = dirty.length;
    console.log("Length: " + len);
    pos1 = dirty.search(/{"attributes":/);
    console.log("{\"attributes\" : " + pos1);
    if (pos1 > 0) {
      dirty = dirty.slice(pos1, len);
    }
    pos2 = dirty.search(/"Featured__c":false}/);
    console.log(" :false} : " + pos2);
    if (pos2 > 0) {
      dirty = dirty.slice(0, pos2 + 20);
    }
    pos3 = dirty.search(/"Featured__c":true/);
    console.log(" :true} : " + pos3);
    if (pos3 > 0) {
      dirty = dirty.slice(0, pos3 + 19);
    }
    pos4 = dirty.search(/' }]/);
    console.log("' }] : " + pos4);
    if (pos4 > 0) {
      dirty = dirty.slice(0, pos4);
    }
    pos5 = dirty.search(/\"}]/);
    console.log(" \"}] : " + pos5);
    if (pos5 > 0) {
      dirty = dirty.slice(0, pos5);
    }
    dirty.replace(/id":"/g, 'id=');
    console.log("CLEAN: " + dirty);
    return dirty;
  };

  app.post('/upload', function(req, res, next) {
    var error, filename, json, len, newapp;

    console.log('..................................>> req.body :');
    console.log(req.body);
    console.log('..................................<< req.body');
    try {
      if (req.body.json === void 0) {
        json = req.body;
      } else {
        json = req.body.json;
      }
      json = cleanbodyjson(json);
      len = json.length;
      if (json.charAt(len === '"')) {
        json = json.slice(0, len);
      }
      newapp = JSON.parse(json);
    } catch (_error) {
      error = _error;
      console.log("InVALID JSON");
      throw error;
    }
    filename = newapp['Id'] + '.json';
    S3upload(filename, JSON.stringify(newapp));
    S3UpdateAppsJSON(newapp);
    return res.send(newapp);
  });

  app.get('/fakeapp', function(req, res) {
    exampleapp = CreateFakeApp();
    return res.send(exampleapp);
  });

  app.get('/tdd', function(req, res) {
    return res.render('SpecRunner.html', {
      title: 'Test Runner'
    });
  });

  app.get('/s3url', function(req, res) {
    return res.send({
      url: 'http://' + S3Config.bucket + '.s3.amazonaws.com/'
    });
  });

  app.get('/appsjson', function(req, res) {
    return $.getJSON(apps_file_url, function(json) {
      return res.send(json);
    });
  });

  /* REDIS
  */


  redis = require('redis');

  redis_client = redis.createClient();

  redis_client.on("error", function(err) {
    return console.log("REDIS Error " + err);
  });

  app.get('/email', function(req, res) {
    return get_email(req, function(email) {
      return res.send("{email: '" + email + "'}");
    });
  });

  get_email = function(req, callback) {
    var connect_session_id_cookie, cookie, cookiepos, end, redis_sess, start;

    console.dir(req.headers.cookie);
    connect_session_id_cookie = 'connect.sid=';
    cookiepos = req.headers.cookie.search(/connect_session_id_cookie/);
    start = cookiepos + connect_session_id_cookie.length + 1;
    end = req.headers.cookie.search(/;/);
    cookie = req.headers.cookie.slice(start, end);
    redis_sess = 'sess:' + cookie.replace(/\'/g, '');
    redis_sess = redis_sess.replace(/%2F/g, '/');
    redis_sess = redis_sess.slice(0, 74);
    return redis_client.get(redis_sess, function(err, reply) {
      var email, json;

      json = JSON.parse(reply);
      email = json.passport.user.profiles.google[0]['emails'][0]['value'];
      return callback(email);
    });
  };

  get_app_list = function(req, callback) {};

  get_personalised_ribbon = function(req, callback) {
    return get_email(req, function(email) {
      if (email.search(/@/)) {
        return console.log(email);
      }
    });
  };

  app.get('/ribbon', function(req, res) {
    return get_personalised_ribbon(req, function(email) {
      console.log(email);
      return res.send(email);
    });
  });

  S3GetListOfApps = function(callback) {
    return S3client.list({
      prefix: 'apps'
    }, function(err, data) {
      var allapps, app_keys, appcount, testapp, _i, _len, _ref;

      appcount = data['Contents'].length;
      if (appcount > 0) {
        app_keys = [];
        _ref = data['Contents'];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          app = _ref[_i];
          testapp = app['Key'].search(/_TEST/);
          allapps = app['Key'].search(/apps\/apps/);
          if (allapps === -1 && testapp === -1) {
            app_keys.push(app['Key']);
          }
        }
        return callback(app_keys);
      }
    });
  };

  app.get('/listapps', function(req, res) {
    return S3GetListOfApps(function(keys) {
      return res.send(keys);
    });
  });

  app.get('/rebuildappjson', function(req, res) {
    return S3GetListOfApps(function(keys) {
      var all_apps, app_url, appcount, i, url, _i, _len, _results;

      appcount = keys.length;
      console.log("Number of Apps to Fetch: " + appcount);
      i = 0;
      all_apps = [];
      _results = [];
      for (_i = 0, _len = keys.length; _i < _len; _i++) {
        url = keys[_i];
        app_url = 'https://' + S3Config['bucket'] + '.s3.amazonaws.com/' + url;
        _results.push(S3ReadSingleAppJSON(app_url, function(json) {
          console.log("ID: " + json['Id']);
          if (json['Active__c'] === true) {
            all_apps.push(json);
          }
          if (i++ === appcount - 1) {
            S3upload(apps_filename, JSON.stringify(all_apps));
            return res.send(all_apps);
          }
        }));
      }
      return _results;
    });
  });

  S3ReadSingleAppJSON = function(app_url, callback) {
    console.log("S3ReadSingleAppJSON for " + app_url);
    return $.getJSON(app_url, function(app) {
      var a;

      a = {};
      a['Id'] = app['Id'];
      a['Name'] = app['Name'];
      a['Mandatory__c'] = app['Mandatory__c'];
      a['Default__c'] = app['Default__c'];
      a['Application_Icon_Url__c'] = app['Application_Icon_Url__c'];
      a['Application_URL__c'] = app['Application_URL__c'];
      a['Description__c'] = app['Description__c'];
      a['Active__c'] = app['Active__c'];
      redis_client.set('apps:' + a['Id'] + '.json', JSON.stringify(a));
      return callback(a);
    });
  };

  app_url = "http://mpyc.s3.amazonaws.com/apps/a07b0000004bXrFAAU.json";

  S3ReadSingleAppJSON(app_url, function(json) {
    return console.log("ID: " + json['Id']);
  });

  S3GetAppJSONStoreRedis = function() {
    return $.getJSON(apps_file_url, function(json) {
      redis_client.set('apps:apps.json', JSON.stringify(json), redis.print);
      return console.log("Updated apps:apps.json in REDIS");
    });
  };

  S3GetAppJSONStoreRedis();

  app.listen(port);

  console.log("Express started on port " + port);

}).call(this);

/*
//@ sourceMappingURL=app.map
*/
