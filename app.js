// Generated by CoffeeScript 1.6.2
/* jslint nomen: true, plusplus: true, vars: true, indent: 2, node: true
*/


(function() {
  "use strict";
  /* - - - - - - - - The Mini Express App - - - - - - - -
  */

  var CreateFakeApp, ECT, Faker, S3Config, S3GetListOfApps, S3ReadSingleAppJSON, S3client, S3uploadjson, app, appdir, apps_file_url, apps_filename, cleanbodyjson, ectRenderer, express, get_app_list, get_email, knox, port, rebuild_apps_json, redis, redis_client, set_my_apps, uniqueId;

  express = require('express');

  app = module.exports = express();

  app.configure(function() {
    app.use(express.bodyParser());
    return app.use(express["static"](__dirname + '/public'));
  });

  /* - - - - - - - - - Copy This to the bottom of SEF-NODEJS/app.js - - - - - - - - -
  */


  /* - - - - - REDIS - - - - -
  */


  redis = require('redis');

  redis_client = redis.createClient();

  redis_client.on("error", function(err) {
    return console.log("REDIS FAIL : " + err);
  });

  /* - - - - - S3 Config and Knox Client - - - - -
  */


  knox = require('knox');

  require('js-yaml');

  S3Config = require('./config/S3.yml');

  S3client = knox.createClient(S3Config);

  /* - - - - - S3 Related Config - - - - -
  */


  appdir = '/apps/';

  apps_filename = 'apps.json';

  apps_file_url = 'https://' + S3Config['bucket'] + '.s3.amazonaws.com' + appdir + apps_filename;

  console.log("apps.json is: " + apps_file_url);

  /* - - - - - MUST Move these Methods to Lib in Next sprint - - - - -
  */


  S3uploadjson = function(filename, jsonstr) {
    var req;

    req = S3client.put(appdir + filename, {
      'Content-Length': jsonstr.length,
      'Content-Type': 'application/json',
      'x-amz-acl': 'public-read'
    });
    req.on('response', function(res) {
      if (200 === res.statusCode) {
        return console.log('saved to %s', req.url);
      }
    });
    return req.end(jsonstr);
  };

  /* Cleans the $H!T JSON We get from Salesforce
  */


  cleanbodyjson = function(req, callback) {
    var dirty, error, json, len, pos1, pos2, pos3, pos4, pos5;

    console.log('..................................>> /upload req.body :');
    console.log(req.body);
    console.log('..................................<< /upload req.body');
    try {
      if (req.body.json === void 0) {
        json = req.body;
      } else {
        json = req.body.json;
      }
    } catch (_error) {
      error = _error;
      console.log("InVALID JSON");
      throw error;
    }
    dirty = json;
    console.log("     TYPE : " + (typeof dirty));
    if (typeof dirty === 'object') {
      dirty = JSON.stringify(dirty);
      dirty = dirty.replace(/\\"/g, '"');
    }
    len = dirty.length;
    console.log("Length: " + len);
    pos1 = dirty.search(/{"attributes":/);
    console.log("{\"attributes\" : " + pos1);
    if (pos1 > 0) {
      dirty = dirty.slice(pos1, len);
    }
    pos2 = dirty.search(/"Featured__c":false}/);
    console.log(" :false} : " + pos2);
    if (pos2 > 0) {
      dirty = dirty.slice(0, pos2 + 20);
    }
    pos3 = dirty.search(/"Featured__c":true/);
    console.log(" :true} : " + pos3);
    if (pos3 > 0) {
      dirty = dirty.slice(0, pos3 + 19);
    }
    pos4 = dirty.search(/' }]/);
    console.log("' }] : " + pos4);
    if (pos4 > 0) {
      dirty = dirty.slice(0, pos4);
    }
    pos5 = dirty.search(/\"}]/);
    console.log(" \"}] : " + pos5);
    if (pos5 > 0) {
      dirty = dirty.slice(0, pos5);
    }
    dirty.replace(/id":"/g, 'id=');
    len = json.length;
    if (json.charAt(len === '"')) {
      json = json.slice(0, len);
    }
    console.log("CLEAN: " + dirty);
    return callback(dirty);
  };

  get_email = function(req, callback) {
    var connect_session_id_cookie, cookie, cookiepos, end, redis_sess, start;

    console.dir(req.headers.cookie);
    connect_session_id_cookie = 'connect.sid=';
    cookiepos = req.headers.cookie.search(/connect_session_id_cookie/);
    start = cookiepos + connect_session_id_cookie.length + 1;
    end = req.headers.cookie.search(/;/);
    cookie = req.headers.cookie.slice(start, end);
    redis_sess = 'sess:' + cookie.replace(/\'/g, '');
    redis_sess = redis_sess.replace(/%2F/g, '/');
    redis_sess = redis_sess.slice(0, 74);
    return redis_client.get(redis_sess, function(err, reply) {
      var email, json;

      json = JSON.parse(reply);
      email = json.passport.user.profiles.google[0]['emails'][0]['value'];
      return callback(email);
    });
  };

  get_app_list = function(req, callback) {
    return get_email(req, function(email) {
      var myapps;

      myapps = 'apps:' + email + '.json';
      console.log("MYAPPS: " + myapps);
      return redis_client.get(myapps, function(err, reply) {
        if (err || reply === null) {
          console.log("REDIS ERROR: " + err + " (user has not personalised ribbon)");
          return redis_client.get('apps:apps.json', function(err, reply) {
            console.log("Send ALL apps.json to browser");
            return callback(reply);
          });
        } else {
          return callback(reply);
        }
      });
    });
  };

  set_my_apps = function(req, callback) {
    var error, json;

    console.log('..................................>> /upload req.body :');
    console.log(req.body);
    console.log('..................................<< /upload req.body');
    try {
      if (req.body.json === void 0) {
        json = req.body;
      } else {
        json = req.body.json;
      }
      json = JSON.parse(json);
    } catch (_error) {
      error = _error;
      console.log("InVALID JSON");
      throw error;
    }
    get_email(req, function(email) {
      return redis_client.set('apps:' + email + '.json', JSON.stringify(json));
    });
    return callback(json);
  };

  /* List all the json files in the S3 Bucket
  */


  S3GetListOfApps = function(callback) {
    return S3client.list({
      prefix: 'apps'
    }, function(err, data) {
      var allapps, app_keys, appcount, testapp, _i, _len, _ref;

      appcount = data['Contents'].length;
      if (appcount > 0) {
        app_keys = [];
        _ref = data['Contents'];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          app = _ref[_i];
          testapp = app['Key'].search(/_TEST/);
          allapps = app['Key'].search(/apps\/apps/);
          if (allapps === -1 && testapp === -1) {
            app_keys.push(app['Key']);
          }
        }
        return callback(app_keys);
      }
    });
  };

  /* Fetch JSON of a Single app from S3 Bucket using JQuery $.getJSON
  */


  S3ReadSingleAppJSON = function(url, callback) {
    var app_url;

    app_url = 'https://' + S3Config['bucket'] + '.s3.amazonaws.com/' + url;
    return S3client.getFile('/' + url, function(err, res) {
      return res.on('data', function(data) {
        var a;

        if (res.statusCode !== 200) {
          console.log("Content Type: " + res.headers['content-type']);
          console.log('..................................>> BAD S3 Res :');
          console.log(data.toString());
          return console.log('..................................<< BAD S3 Res');
        } else {
          app = JSON.parse(data.toString());
          a = {};
          a['Id'] = app['Id'];
          a['Name'] = app['Name'];
          a['Mandatory__c'] = app['Mandatory__c'];
          a['Default__c'] = app['Default__c'];
          a['Application_Icon_Url__c'] = app['Application_Icon_Url__c'];
          a['Application_URL__c'] = app['Application_URL__c'];
          a['Description__c'] = app['Description__c'];
          a['Active__c'] = app['Active__c'];
          redis_client.set('apps:' + a['Id'] + '.json', JSON.stringify(a));
          return callback(a);
        }
      });
    });
  };

  rebuild_apps_json = function(callback) {
    return S3GetListOfApps(function(keys) {
      var all_apps, appcount, i, url, _i, _len, _results;

      appcount = keys.length;
      i = 0;
      all_apps = [];
      _results = [];
      for (_i = 0, _len = keys.length; _i < _len; _i++) {
        url = keys[_i];
        _results.push(S3ReadSingleAppJSON(url, function(json) {
          if (json['Active__c'] === true) {
            all_apps.push(json);
          }
          if (i++ === appcount - 1) {
            S3uploadjson(apps_filename, JSON.stringify(all_apps));
            return callback(all_apps);
          }
        }));
      }
      return _results;
    });
  };

  /* - - - - - - Ribbon / Apps Related Routes - - - - - -
  */


  /* Upload a JSON String and push that as a file to S3
  */


  app.post('/upload', function(req, res, next) {
    return cleanbodyjson(req, function(json) {
      var filename, newapp;

      newapp = JSON.parse(json);
      filename = newapp['Id'] + '.json';
      S3uploadjson(filename, JSON.stringify(newapp));
      res.send(newapp);
      return rebuild_apps_json(function(all_apps) {
        return console.log("New App Count " + all_apps.length);
      });
    });
  });

  /* Fetch FULL List of APPS from Redis
  */


  app.get('/appsjson', function(req, res) {
    return redis_client.get('apps:apps.json', function(err, reply) {
      return res.send(JSON.parse(reply));
    });
  });

  /* Get PERSONALISED List of APPS from Redis
  */


  app.get('/getmyappsjson', function(req, res) {
    return get_app_list(req, function(reply) {
      return res.send(JSON.parse(reply));
    });
  });

  /* Set PERSONALISED List of APPS to Redis
  */


  app.post('/setmyappsjson', function(req, res) {
    return set_my_apps(req, function(json) {
      return res.send(json);
    });
  });

  /* List the apps/#{id}.json files in S3 Bucket
  */


  app.get('/listapps', function(req, res) {
    return S3GetListOfApps(function(keys) {
      return res.send(keys);
    });
  });

  app.get('/rebuildappjson', function(req, res) {
    return rebuild_apps_json(function(all_apps) {
      return res.send(all_apps);
    });
  });

  /* GEt the logged in user's email address from Session Cookie
  */


  app.get('/email', function(req, res) {
    return get_email(req, function(email) {
      return res.send({
        'email': email
      });
    });
  });

  /* - - - - - - - - TDD Specific Functions & Routes - - - - - - - -
  */


  ECT = require('ect');

  Faker = require('Faker');

  uniqueId = function(length) {
    var id;

    if (length == null) {
      length = 18;
    }
    id = '_TEST';
    while (id.length < length) {
      id += Math.random().toString(36).substr(2);
    }
    return id.substr(0, length);
  };

  CreateFakeApp = function() {
    var exampleapp, _ref;

    exampleapp = require('./public/app-example.json');
    exampleapp['Active__c'] = false;
    exampleapp['Id'] = uniqueId(18);
    exampleapp['Mandatory__c'] = (_ref = Math.random() < 0.5) != null ? _ref : {
      "true": false
    };
    exampleapp['Name'] = Faker.random.bs_buzz();
    exampleapp['Description__c'] = Faker.Lorem.sentence();
    return exampleapp;
  };

  ectRenderer = ECT({
    watch: true,
    root: __dirname + '/views'
  });

  app.engine('.html', ectRenderer.render);

  app.get('/', function(req, res) {
    return res.render('ribbon.html', {
      title: 'App Ribbon Test'
    });
  });

  app.get('/upload', function(req, res) {
    return res.render('uploadform.html', {
      title: 'Basic Uploader Form'
    });
  });

  app.get('/fakeapp', function(req, res) {
    var exampleapp;

    exampleapp = CreateFakeApp();
    return res.send(exampleapp);
  });

  app.get('/tdd', function(req, res) {
    return res.render('SpecRunner.html', {
      title: 'Test Runner'
    });
  });

  app.get('/s3url', function(req, res) {
    return res.send({
      url: 'http://' + S3Config.bucket + '.s3.amazonaws.com/'
    });
  });

  /* - - - - - - - - - Don't Copy below this point - - - - - - - - -
  */


  port = process.env.PORT || 5000;

  app.listen(port);

  console.log("Express started on port " + port);

}).call(this);
