// Generated by CoffeeScript 1.4.0

/* jslint nomen: true, plusplus: true, vars: true, indent: 2, node: true
*/


(function() {
  "use strict";

  var ECT, Faker, app, appdir, buildappsjson, ectRenderer, express, fs, port, savejson, uniqueId;

  express = require('express');

  ECT = require('ect');

  fs = require('fs');

  Faker = require('Faker');

  appdir = './apps/';

  port = process.env.PORT || 5000;

  /* MUST: Move these Methods to Lib in Next sprint
  */


  uniqueId = function(length) {
    var id;
    if (length == null) {
      length = 18;
    }
    id = '_TEST';
    while (id.length < length) {
      id += Math.random().toString(36).substr(2);
    }
    return id.substr(0, length);
  };

  savejson = function(jsonStr) {
    var filename, id;
    id = JSON.parse(jsonStr)['Id'];
    filename = appdir + id + ".json";
    return fs.writeFile(filename, jsonStr, {
      encoding: 'utf8'
    }, function(err) {
      if (err) {
        throw err;
      }
      console.log("Local File Written: " + filename);
      return filename;
    });
  };

  buildappsjson = function() {
    return fs.readdir('./apps', function(err, list) {
      var app, apps, file, i, _i, _len;
      apps = [];
      i = 0;
      for (_i = 0, _len = list.length; _i < _len; _i++) {
        file = list[_i];
        if (file !== '.DS_Store' && file !== 'apps.json') {
          app = require('./apps/' + file);
          if (app['Active__c'] === true) {
            apps.push(app);
          }
        }
      }
      fs.writeFile('./apps/apps.json', JSON.stringify(apps), {
        encoding: 'utf8'
      }, function(err) {});
      if (err) {
        throw err;
      }
      return console.log("Local File Written: ./apps/apps.json");
    });
  };

  /* The Mini Express App
  */


  app = module.exports = express();

  app.configure(function() {
    app.use(express.bodyParser());
    app.use(express["static"](__dirname + '/public'));
    app.use(express["static"](__dirname + '/spec'));
    app.use(express["static"](__dirname + '/lib'));
    return app.use(express["static"](__dirname + '/apps'));
  });

  ectRenderer = ECT({
    watch: true,
    root: __dirname + '/views'
  });

  app.engine('.html', ectRenderer.render);

  app.get('/', function(req, res) {
    return res.render('uploadform.html', {
      title: 'Basic Uploader Form'
    });
  });

  app.get('/upload', function(req, res) {
    return res.render('uploadform.html', {
      title: 'Basic Uploader Form'
    });
  });

  app.post('/upload', function(req, res, next) {
    var filename;
    filename = savejson(req.body.json);
    return res.send({
      "filename": JSON.parse(req.body.json)['Id'] + '.json'
    });
  });

  app.get('/fakeapp', function(req, res) {
    var exampleapp, _ref;
    exampleapp = require('./public/app-example.json');
    exampleapp['Id'] = uniqueId(18);
    exampleapp['Mandatory__c'] = (_ref = Math.random() < 0.5) != null ? _ref : {
      "true": false
    };
    exampleapp['Name'] = Faker.random.bs_buzz();
    exampleapp['Description__c'] = Faker.Lorem.sentence();
    return res.send(exampleapp);
  });

  app.get('/tdd', function(req, res) {
    return res.render('SpecRunner.html', {
      title: 'Test Runner'
    });
  });

  app.get('/s3url', function(req, res) {
    return res.send({
      url: 'http://' + S3.S3Config.bucket + '.s3.amazonaws.com/'
    });
  });

  app.get('/buildappsjson', function(req, res) {
    var apps;
    buildappsjson();
    apps = require('./apps/apps.json');
    return res.send(JSON.stringify(apps));
  });

  app.listen(port);

  console.log("Express started on port " + port);

}).call(this);
